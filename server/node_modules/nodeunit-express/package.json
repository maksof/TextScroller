{
  "author": {
    "name": "Peter Vandercappellen"
  },
  "name": "nodeunit-express",
  "description": "A Mock Request object to use when node-unit-testing an express app",
  "version": "0.0.5",
  "homepage": "https://github.com/peter-vdc/nodeunit-express",
  "repository": {
    "url": "https://github.com/peter-vdc/nodeunit-express"
  },
  "peerDependencies": {
    "express": "*"
  },
  "dependencies": {
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "body-parser": "~1.10.1",
    "express": "~4.10.6",
    "nodeunit": "~0.9.0"
  },
  "main": "index",
  "scripts": {
    "test": "nodeunit tests/"
  },
  "readme": "### nodeunit-express\r\n\r\nnodeunit-express is a utility function to make it easy to write tests for Node.JS [Express](https://github.com/visionmedia/express) applications.\r\nIt is based on the https://github.com/rubymaverick/express-mock-request project, which I could not get to work properly.\r\n\r\n#### How to use:\r\n\r\nFirst, install using npm:\r\n\r\n    npm install nodeunit-express\r\n\r\nThen require it in your test file like so:\r\n\r\n```javascript\r\nvar request = require('nodeunit-express');\r\n```\r\n\r\nLet's say you want to test this simple express app to make sure it returns the proper status, body, and headers:\r\n\r\n```javascript\r\nvar express = require('express')\r\nvar app = module.exports = express();\r\n\r\napp.get('/', function(req, res) {\r\n  res.send(\"ok\", {'Content-Type': 'text/html'}, 200);\r\n});\r\n\r\n// Only start listening on 8080 when this file is run directly i.e.: node app.js\r\nif(!module.parent) {\r\n  app.listen(8080);\r\n}\r\n```\r\n\r\nYou could write your test like so:\r\n\r\n```javascript\r\nvar request = require('nodeunit-express');\r\n// require the express application, notice how we exported the express app using `module.exports` above\r\nvar app = require('../app');\r\n\r\n// This is a nodeunit test example\r\nexports.testGet = function(test){\r\n  var express = request(app);\r\n  express.get('/').expect(function(response) {\r\n    // response is the response from hitting '/'\r\n    test.equal(response.body, \"ok\");\r\n    test.equal(response.statusCode, 200);\r\n    test.equal(response.headers['content-type'], \"text/html\");\r\n    test.done();\r\n    express.close();\r\n  });\r\n}\r\n```\r\n\r\n## Tester\r\n```js\r\nvar testerInitializer = require('nodeunit-express/tester');\r\nvar app = require('../app');\r\n\r\nvar globalOptions = {\r\n    prepare: function (res) {\r\n        if (res.body != null) {\r\n            res.body = JSON.parse(res.body);\r\n        }\r\n\r\n        return res;\r\n    }\r\n};\r\n\r\nvar tester = testerInitializer(globalOptions);\r\n\r\nmodule.exports['test test'] = tester(app, {\r\n    method: 'POST',\r\n    uri: '/user/123/',\r\n    headers: {\r\n        'some-header-key': 'some-header-value'\r\n    },\r\n    body: {\r\n        \"first_name\": \"Mike\",\r\n        \"last_name\": \"Portnoy\"\r\n    }\r\n\r\n    expect: {\r\n        // any response property what you need check\r\n\r\n        // statusCode\r\n        statusCode: 400\r\n\r\n        // expect body as object. By default all specified expected properties compare deeply by test.deepEqual\r\n        body: {\r\n            error: {\r\n                name: \"ValidationError\",\r\n                rule: \"required\"\r\n            }\r\n        }\r\n\r\n        // expect body as function if you need check not all property\r\n        body: function (body, response, options, args) {\r\n            // args: tester returns a function. args is called function arguments. for example for nodeunit first argument is \"test\"\r\n            // response: response object\r\n            // options: compiled options\r\n            var test = args[0];\r\n\r\n            test.strictEqual(body.error.name, 'ValidationError');\r\n        }\r\n    }\r\n});\r\n```",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/peter-vdc/nodeunit-express/issues"
  },
  "_id": "nodeunit-express@0.0.5",
  "dist": {
    "shasum": "b598314212d908bacbc797800bec82c5edc366ec"
  },
  "_from": "nodeunit-express@0.0.5",
  "_resolved": "https://registry.npmjs.org/nodeunit-express/-/nodeunit-express-0.0.5.tgz"
}

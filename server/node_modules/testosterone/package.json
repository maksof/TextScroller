{
  "name": "testosterone",
  "description": "Virile testing for http servers or any nodejs application",
  "version": "1.3.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/masylum/testosterone.git"
  },
  "author": {
    "name": "Pau Ramon Revilla",
    "email": "masylum@gmail.com"
  },
  "directories": {
    "lib": "lib"
  },
  "dependencies": {
    "colors": ">=0.3.0",
    "underscore": "1.1.7"
  },
  "devDependencies": {
    "express": "2.5.6",
    "gently": "0.9.1"
  },
  "main": "index",
  "engines": {
    "node": "*"
  },
  "readme": "# ✿ Testosterone\n\nVirile testing for http servers or any nodejs application.\n\n## Installation\n\n`npm install testosterone`\n\n## WhateverDrivenDevelopment\n\nTestosterone allows you to follow BDD or TDD on any of your projects using\nthe same testing library.\n\n<img src = \"https://github.com/masylum/testosterone/raw/master/testosterone.png\" border = \"0\" />\n\n## Options\n\n  * `host`: Host to do the http calls. *localhost*\n  * `port`: Port to do the http calls. *80*\n  * `output`: Configure the amount of verbosity you want for your tests\n    * `specs`: Print the specs *true*\n    * `ticks`: Print the ✓ and ✗ ticks *true*\n    * `summary`: Prints the summary *true*\n    * `title`: Prints the title *true*\n  * `title`: Test title, it will be printed out. *Testosterone*\n  * `sync`: If set to `true`, you don't need to call `done` to specify when your tests are done. *false*\n\n## API\n\n_testosterone_ API is simple and flexible.\n\n- `get|post|head|put|delete...(url, req, response, cb)`: Does a http call with the given request. If a response is given, testosterone will assert that the real response matches.\n- `add(spec, function(done))`: Adds a test. The test is considered executed when `done` function is called.\n- `before(function)`: Runs before each test.\n- `after(function)`: Runs after each test.\n- `run([cb])`: Runs the tests in serial. `cb` will be called once all the tests are executed.\n- `assert`: You **must** use this assert object instead of the native one.\n\nAll the functions are chainable.\n\n## Show me the code\n\nYou have more examples on the `test` folder:\n\n### HTTP testing example:\n\n``` javascript\nvar testosterone = require('testosterone')({port: 3000})\n  , assert = testosterone.assert;\n\ntestosterone\n  .get('/', function (res) {\n    assert.equal(res.statusCode, 200)\n  })\n\n  .get('/hi', function (res) {\n    assert.equal(res.statusCode, 500);\n    assert.equal(res.body, 'use post instead');\n  })\n\n  .post('/hi', {data: {message: 'hola'}}, {\n    status: 200\n  , body: 'hola'\n  });\n\n// Output\n\n$ node test.js\n\n✿ Testosterone : ✓ ✓ ✓ ✓ ✓\n» 3 responses, 5 asserts\n```\n\n### Asynchronous example:\n\n``` javascript\nvar testosterone = require('testosterone')({post: 3000, title: 'Testing async'})\n  , assert = testosterone.assert;\n\ntestosterone\n\n  .before(function () {\n    console.log('test about to run!');\n  })\n\n  // using done to tell testosterone when the test is done\n  .add('First test', function (done) {\n    setTimeout(function () {\n      assert.ok(true);\n      done();\n    }, 999);\n  })\n\n  // same but currying\n  .add('Second test', function (spec) {\n    assert.ok(true);\n\n    setTimeout(done(function () {\n      assert.ok(true);\n    }), 10);\n  })\n\n  .run(function () {\n    require('sys').print('All tests passed!');\n  });\n\n// Output\n\n$ node test.js\n\n✿ Testing async :\n\nFirst test => ✓\nSecond test => ✓ ✓\n\n» 0 responses, 3 asserts\n```\n\n### Example with [gently](https://github.com/felixge/node-gently.git) stubbing and `sync: true`:\n\n``` javascript\nvar testosterone = require('testosterone')({post: 3000, title: 'Testing with stubs', sync: true})\n  , gently = new (require('gently'))\n  , fs = require('fs')\n  , assert = testosterone.assert;\n\ntestosterone\n  .add('GIVEN foo.txt \\nWHEN its empty \\nTHEN it return null', function (spec) {\n    gently.expect(fs, 'readFile', function (path, encoding, cb) {\n      assert.equal(path, 'foo.txt');\n      cb(null, null);\n    });\n\n    fs.readFile('foo.txt', 'utf-8', function (er, data) {\n      assert.equal(er, null);\n      assert.equal(data, null);\n    });\n  })\n\n  .add('GIVEN foo.txt \\nWHEN it have content \\nTHEN it return that content', function (spec) {\n    gently.expect(fs, 'readFile', function (path, encoding, cb) {\n      assert.equal(path, 'foo.txt');\n      cb(null, 'foo');\n    });\n\n    fs.readFile('foo.txt', 'utf-8', function (er, data) {\n      assert.equal(er, null);\n      assert.equal(data, 'foo');\n    });\n  })\n\n  .run(function () {\n    require('sys').print('done!');\n  });\n\n// Output\n\n$ node test.js\n\n✿ Testing with stubs :\n\nGIVEN foo.txt\nWHEN its empty\nTHEN it return null => ✓ ✓ ✓\n\nGIVEN foo.txt\nWHEN it have content\nTHEN it return that content => ✓ ✓ ✓\n\n» 6 asserts\n```\n\n## Test\n\nIn order to run the tests type:\n\n``` bash\nnpm install\nmake test_app\nmake\n```\n\n## Credits\n\nThe *_call* function of this library is a shameless copy from [expresso](https://github.com/visionmedia/expresso) response assert done by TJ Holowaychuk ([visionmedia](http://github.com/visionmedia))\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/masylum/testosterone/issues"
  },
  "homepage": "https://github.com/masylum/testosterone",
  "_id": "testosterone@1.3.1",
  "_from": "testosterone@1.3.1"
}
